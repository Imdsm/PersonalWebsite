// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    public static PersonalWebsite.Controllers.AccountController Account = new PersonalWebsite.Controllers.T4MVC_AccountController();
    public static PersonalWebsite.Controllers.BlogController Blog = new PersonalWebsite.Controllers.T4MVC_BlogController();
    public static PersonalWebsite.Controllers.ContactController Contact = new PersonalWebsite.Controllers.T4MVC_ContactController();
    public static PersonalWebsite.Controllers.HomeController Home = new PersonalWebsite.Controllers.T4MVC_HomeController();
    public static PersonalWebsite.Controllers.ProfileController Profile = new PersonalWebsite.Controllers.T4MVC_ProfileController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_PartialViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string checkbox_png = Url("checkbox.png");
            public static readonly string checkbox_checked_png = Url("checkbox_checked.png");
            public static readonly string checkbox_hover_png = Url("checkbox_hover.png");
            public static readonly string comments_png = Url("comments.png");
            public static readonly string email_png = Url("email.png");
            public static readonly string favicon_ico = Url("favicon.ico");
            public static readonly string fork_png = Url("fork.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class foundation {
                private const string URLPATH = "~/Content/images/foundation";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class orbit {
                    private const string URLPATH = "~/Content/images/foundation/orbit";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bullets_jpg = Url("bullets.jpg");
                    public static readonly string left_arrow_small_png = Url("left-arrow-small.png");
                    public static readonly string left_arrow_png = Url("left-arrow.png");
                    public static readonly string loading_gif = Url("loading.gif");
                    public static readonly string mask_black_png = Url("mask-black.png");
                    public static readonly string pause_black_png = Url("pause-black.png");
                    public static readonly string right_arrow_small_png = Url("right-arrow-small.png");
                    public static readonly string right_arrow_png = Url("right-arrow.png");
                    public static readonly string rotator_black_png = Url("rotator-black.png");
                    public static readonly string timer_black_png = Url("timer-black.png");
                }
            
            }
        
            public static readonly string portrait_jpg = Url("portrait.jpg");
            public static readonly string portrait2_jpg = Url("portrait2.jpg");
            public static readonly string source_png = Url("source.png");
            public static readonly string star_png = Url("star.png");
            public static readonly string views_png = Url("views.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class javascripts {
            private const string URLPATH = "~/Content/javascripts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string auto_prettify_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/auto-prettify.min.js") ? Url("auto-prettify.min.js") : Url("auto-prettify.js");
                          
            public static readonly string foundation_app_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/foundation-app.min.js") ? Url("foundation-app.min.js") : Url("foundation-app.js");
                          
            public static readonly string foundation_stub_min_js = Url("foundation-stub.min.js");
            public static readonly string jquery_foundation_tooltips_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.foundation.tooltips.min.js") ? Url("jquery.foundation.tooltips.min.js") : Url("jquery.foundation.tooltips.js");
                          
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class prettify {
                private const string URLPATH = "~/Content/javascripts/prettify";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string lang_apollo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-apollo.min.js") ? Url("lang-apollo.min.js") : Url("lang-apollo.js");
                              
                public static readonly string lang_basic_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-basic.min.js") ? Url("lang-basic.min.js") : Url("lang-basic.js");
                              
                public static readonly string lang_clj_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-clj.min.js") ? Url("lang-clj.min.js") : Url("lang-clj.js");
                              
                public static readonly string lang_css_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-css.min.js") ? Url("lang-css.min.js") : Url("lang-css.js");
                              
                public static readonly string lang_dart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-dart.min.js") ? Url("lang-dart.min.js") : Url("lang-dart.js");
                              
                public static readonly string lang_erlang_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-erlang.min.js") ? Url("lang-erlang.min.js") : Url("lang-erlang.js");
                              
                public static readonly string lang_go_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-go.min.js") ? Url("lang-go.min.js") : Url("lang-go.js");
                              
                public static readonly string lang_hs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-hs.min.js") ? Url("lang-hs.min.js") : Url("lang-hs.js");
                              
                public static readonly string lang_lisp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-lisp.min.js") ? Url("lang-lisp.min.js") : Url("lang-lisp.js");
                              
                public static readonly string lang_llvm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-llvm.min.js") ? Url("lang-llvm.min.js") : Url("lang-llvm.js");
                              
                public static readonly string lang_lua_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-lua.min.js") ? Url("lang-lua.min.js") : Url("lang-lua.js");
                              
                public static readonly string lang_ml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-ml.min.js") ? Url("lang-ml.min.js") : Url("lang-ml.js");
                              
                public static readonly string lang_mumps_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-mumps.min.js") ? Url("lang-mumps.min.js") : Url("lang-mumps.js");
                              
                public static readonly string lang_n_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-n.min.js") ? Url("lang-n.min.js") : Url("lang-n.js");
                              
                public static readonly string lang_pascal_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-pascal.min.js") ? Url("lang-pascal.min.js") : Url("lang-pascal.js");
                              
                public static readonly string lang_proto_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-proto.min.js") ? Url("lang-proto.min.js") : Url("lang-proto.js");
                              
                public static readonly string lang_r_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-r.min.js") ? Url("lang-r.min.js") : Url("lang-r.js");
                              
                public static readonly string lang_rd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-rd.min.js") ? Url("lang-rd.min.js") : Url("lang-rd.js");
                              
                public static readonly string lang_scala_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-scala.min.js") ? Url("lang-scala.min.js") : Url("lang-scala.js");
                              
                public static readonly string lang_sql_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-sql.min.js") ? Url("lang-sql.min.js") : Url("lang-sql.js");
                              
                public static readonly string lang_tcl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-tcl.min.js") ? Url("lang-tcl.min.js") : Url("lang-tcl.js");
                              
                public static readonly string lang_tex_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-tex.min.js") ? Url("lang-tex.min.js") : Url("lang-tex.js");
                              
                public static readonly string lang_vb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-vb.min.js") ? Url("lang-vb.min.js") : Url("lang-vb.js");
                              
                public static readonly string lang_vhdl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-vhdl.min.js") ? Url("lang-vhdl.min.js") : Url("lang-vhdl.js");
                              
                public static readonly string lang_wiki_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-wiki.min.js") ? Url("lang-wiki.min.js") : Url("lang-wiki.js");
                              
                public static readonly string lang_xq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-xq.min.js") ? Url("lang-xq.min.js") : Url("lang-xq.js");
                              
                public static readonly string lang_yaml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-yaml.min.js") ? Url("lang-yaml.min.js") : Url("lang-yaml.js");
                              
                public static readonly string prettify_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prettify.min.js") ? Url("prettify.min.js") : Url("prettify.js");
                              
                public static readonly string run_prettify_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/run_prettify.min.js") ? Url("run_prettify.min.js") : Url("run_prettify.js");
                              
            }
        
            public static readonly string tag_it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tag-it.min.js") ? Url("tag-it.min.js") : Url("tag-it.js");
                          
            public static readonly string tag_it_min_js = Url("tag-it.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class stylesheets {
            private const string URLPATH = "~/Content/stylesheets";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string app_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.min.css") ? Url("app.min.css") : Url("app.css");
                 
            public static readonly string foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/foundation.min.css") ? Url("foundation.min.css") : Url("foundation.css");
                 
            public static readonly string jquery_tagit_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.tagit.min.css") ? Url("jquery.tagit.min.css") : Url("jquery.tagit.css");
                 
            public static readonly string prettify_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prettify.min.css") ? Url("prettify.min.css") : Url("prettify.css");
                 
            public static readonly string tagit_ui_zendesk_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tagit.ui-zendesk.min.css") ? Url("tagit.ui-zendesk.min.css") : Url("tagit.ui-zendesk.css");
                 
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


